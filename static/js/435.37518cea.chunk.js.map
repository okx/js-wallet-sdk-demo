{"version":3,"file":"static/js/435.37518cea.chunk.js","mappings":"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","sources":["components/CardActionButton.js","components/DemoAutocompleteCoinType.js","components/DemoAutocompleteSegwit.js","components/DemoDialog.js","components/DemoWalletInfo.js","features/generateMnenomic.js"],"sourcesContent":["import { Button } from \"@mui/material\";\n\nconst CardActionButton = ({\n  buttonText,\n  onClick,\n  disabled = false,\n  testId = \"\",\n}) => {\n  return (\n    <Button\n      size=\"small\"\n      variant=\"contained\"\n      sx={{ backgroundColor: \"black\", borderRadius: 2 }}\n      onClick={onClick}\n      disabled={disabled}\n      data-testid={testId}\n    >\n      {buttonText}\n    </Button>\n  );\n};\n\nexport { CardActionButton };\n","import { Autocomplete, TextField } from \"@mui/material\";\n\nimport { useStore } from \"../stores\";\n\nconst DemoAutocompleteCoinType = ({\n  setCoinType,\n  setNetwork,\n  setSegwitType,\n}) => {\n  // mobx store that link up with sdk wallets\n  const { walletStore } = useStore();\n  const coinTypeOptions = walletStore.coinTypeMapping.map((data) => {\n    return {\n      network: data.network,\n      label: `${data.network} - ${data.label}`,\n      value: data.label,\n    };\n  });\n  return (\n    <Autocomplete\n      options={coinTypeOptions}\n      sx={{ width: 288, py: 1, pr: 1 }}\n      renderInput={(params) => <TextField {...params} label=\"Coin Type\" />}\n      onChange={(_, value) => {\n        setCoinType(value?.value);\n        setNetwork(value?.network === \"BTC\" ? value?.network : undefined);\n        if (value?.network !== \"BTC\") {\n          setSegwitType();\n        }\n      }}\n      isOptionEqualToValue={(option, value) => option.value === value.value}\n      groupBy={(option) => option.network}\n      data-testid=\"autocomplete-coin-type\"\n    />\n  );\n};\n\nexport { DemoAutocompleteCoinType };\n","import { Autocomplete, TextField } from \"@mui/material\";\n\nconst DemoAutocompleteSegwit = ({ setSegwitType }) => {\n  const segwitTypeOptions = [\n    { label: \"legacy\", value: undefined, enumValue: 0 },\n    { label: \"segwit_native\", value: \"segwit_native\", enumValue: 3 },\n    { label: \"segwit_nested\", value: \"segwit_nested\", enumValue: 1 },\n    { label: \"segwit_nested_49\", value: \"segwit_nested_49\", enumValue: 2 },\n    { label: \"segwit_taproot\", value: \"segwit_taproot\", enumValue: 4 },\n  ];\n  return (\n    <Autocomplete\n      options={segwitTypeOptions}\n      sx={{ width: 288, py: 1, pr: 1 }}\n      renderInput={(params) => <TextField {...params} label=\"Segwit Type\" />}\n      onChange={(_, value) => {\n        setSegwitType(value);\n      }}\n      isOptionEqualToValue={(option, value) =>\n        !option.value || option.value === value.value\n      }\n      groupBy={(option) => option.network}\n      data-testid=\"autocomplete-segwit\"\n      defaultValue={segwitTypeOptions[0]}\n    />\n  );\n};\n\nexport { DemoAutocompleteSegwit };\n","import {\n  Button,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogContentText,\n  DialogActions,\n} from \"@mui/material\";\n\nconst DemoDialog = ({\n  title,\n  content,\n  closeButtonText = \"No\",\n  confirmButtonText = \"Yes\",\n  showDialog = false,\n  handleClose,\n  handleConfirm,\n}) => {\n  return (\n    <Dialog\n      open={showDialog}\n      onClose={handleClose || handleConfirm}\n      aria-labelledby=\"alert-dialog-title\"\n      aria-describedby=\"alert-dialog-description\"\n    >\n      <DialogTitle id=\"alert-dialog-title\">{title}</DialogTitle>\n      <DialogContent>\n        <DialogContentText id=\"alert-dialog-description\">\n          {content}\n        </DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        {handleClose && (\n          <Button onClick={handleClose}>{closeButtonText}</Button>\n        )}\n        <Button onClick={handleConfirm} autoFocus>\n          {confirmButtonText}\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport { DemoDialog };\n","import { Grid, Alert, AlertTitle, Divider, IconButton } from \"@mui/material\";\nimport ContentCopyIcon from \"@mui/icons-material/ContentCopy\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\n\nimport \"./DemoWalletInfo.css\";\nimport { useStore } from \"../stores\";\nimport { observer } from \"mobx-react-lite\";\n\nconst contentCopy = (walletInfo, appStore) => {\n  navigator.clipboard.writeText(JSON.stringify(walletInfo));\n  appStore.snackBarMessage = \"Copied to clipboard\";\n  appStore.openSnackBar = true;\n};\nconst deleteWalletInfo = (callback, appStore) => {\n  appStore.snackBarMessage = \"Address deleted\";\n  appStore.openSnackBar = true;\n  callback();\n};\nconst DemoWalletInfo = ({ walletInfo, index, callback }) => {\n  const { appStore } = useStore();\n  return (\n    <>\n      <Alert\n        severity=\"success\"\n        key={`wallet-info-${index}`}\n        data-testid={`wallet-info-${index}`}\n      >\n        <Grid container spacing={2}>\n          <Grid item xs>\n            <AlertTitle>Success</AlertTitle>\n          </Grid>\n          <Grid item>\n            <IconButton onClick={() => contentCopy(walletInfo, appStore)}>\n              <ContentCopyIcon fontSize=\"small\" />\n            </IconButton>\n            <IconButton onClick={() => deleteWalletInfo(callback, appStore)}>\n              <DeleteIcon fontSize=\"small\" />\n            </IconButton>\n          </Grid>\n        </Grid>\n        {walletInfo.coinType && (\n          <strong>{`Chain: ${walletInfo.coinType}`}</strong>\n        )}\n        {walletInfo.segwitType && (\n          <>\n            <br />\n            <strong>{`Segwit Type: ${walletInfo.segwitType}`}</strong>\n          </>\n        )}\n        {walletInfo.derivedPath && (\n          <>\n            <br />\n            <strong>{`Derivation Path: ${walletInfo.derivedPath}`}</strong>\n          </>\n        )}\n        {walletInfo.privateKey && (\n          <>\n            <br />\n            <strong>{`Private Key: ${walletInfo.privateKey}`}</strong>\n          </>\n        )}\n        {walletInfo.address && (\n          <>\n            <br />\n            <strong>{`Address: ${walletInfo.address}`}</strong>{\" \"}\n          </>\n        )}\n        {walletInfo.publicKey && (\n          <>\n            <br />\n            <strong>{`Public Key: ${walletInfo.publicKey}`}</strong>\n          </>\n        )}\n      </Alert>\n      <Divider flexItem key=\"divider\" />\n    </>\n  );\n};\n\nexport default observer(DemoWalletInfo);\n","import { useState, useEffect } from \"react\";\nimport { observer } from \"mobx-react-lite\";\n\nimport {\n  Card,\n  CardContent,\n  CardActions,\n  Typography,\n  Alert,\n  AlertTitle,\n  Divider,\n  Grid,\n  IconButton,\n} from \"@mui/material\";\nimport ContentCopyIcon from \"@mui/icons-material/ContentCopy\";\nimport { bip39 } from \"@okxweb3/crypto-lib\";\n\nimport { CardActionButton } from \"../components/CardActionButton\";\nimport { DemoAutocompleteCoinType } from \"../components/DemoAutocompleteCoinType\";\nimport { DemoAutocompleteSegwit } from \"../components/DemoAutocompleteSegwit\";\nimport { DemoDialog } from \"../components/DemoDialog\";\nimport DemoWalletInfo from \"../components/DemoWalletInfo\";\nimport { useStore } from \"../stores\";\n\n// card per feature\nconst GenerateMnenomicCard = () => {\n  // local UI state\n  const [coinType, setCoinType] = useState();\n  const [network, setNetwork] = useState();\n  const [segwitType, setSegwitType] = useState();\n  const [mnenomic, setMnenomic] = useState();\n  const [walletInfos, setWalletInfos] = useState([]);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [showDialog, setShowDialog] = useState(false);\n\n  // mobx store that link up with sdk wallets\n  const { walletStore, appStore } = useStore();\n  const isInit = walletStore.isInit;\n\n  // local UI state cleanup when sdk re-initialized\n  useEffect(() => {\n    setCoinType();\n    setMnenomic();\n    setWalletInfos([]);\n    setErrorMessage(\"\");\n    setShowDialog(false);\n  }, [isInit]);\n\n  // event handler\n  const handleDialogClose = () => {\n    setShowDialog(false);\n  };\n  const contentCopy = (mnenomic, appStore) => {\n    navigator.clipboard.writeText(mnenomic);\n    appStore.snackBarMessage = \"Copied to clipboard\";\n    appStore.openSnackBar = true;\n  };\n\n  // feature logic\n  const generateMnenomic = async () => {\n    try {\n      const result = await bip39.generateMnemonic();\n      setMnenomic(result);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n  const generatePrivateKey = async () => {\n    if (!coinType) {\n      setErrorMessage(\"Please select a coin type!\");\n      return;\n    }\n    if (\n      walletInfos.findIndex(\n        (walletInfo) =>\n          walletInfo.coinType === coinType &&\n          walletInfo.segwitType === segwitType?.value\n      ) > -1\n    ) {\n      setShowDialog(true);\n      return;\n    }\n    try {\n      setErrorMessage(\"\");\n      let wallet = walletStore.getWallet(coinType);\n      if (wallet) {\n        const derivePathParams = { index: 0 };\n        if (network === \"BTC\" && segwitType?.enumValue) {\n          Object.assign(derivePathParams, {\n            segwitType: segwitType?.enumValue,\n          });\n        }\n        const derivedPath = await wallet.getDerivedPath(derivePathParams);\n        const privateKey = await wallet.getDerivedPrivateKey({\n          mnemonic: mnenomic,\n          hdPath: derivedPath,\n        });\n        const newAddressParams = { privateKey };\n        if (network === \"BTC\" && segwitType?.value) {\n          Object.assign(newAddressParams, {\n            addressType:\n              segwitType?.value === \"segwit_nested_49\"\n                ? \"segwit_nested\"\n                : segwitType?.value,\n          });\n        }\n        const address = await wallet.getNewAddress(newAddressParams);\n        const walletInfo = {\n          coinType,\n          segwitType: segwitType ? segwitType.value : undefined,\n          derivedPath,\n          privateKey,\n          address: address.address,\n        };\n        if (address.publicKey) {\n          Object.assign(walletInfo, {\n            publicKey: address.publicKey,\n          });\n        }\n        setWalletInfos([walletInfo, ...walletInfos]);\n      }\n    } catch (err) {\n      console.error(err);\n      setErrorMessage(err.toString());\n    }\n  };\n  const deletePrivateKey = (index) => {\n    setWalletInfos(walletInfos.toSpliced(index, 1));\n  };\n\n  // render logic\n  return isInit ? (\n    <>\n      <Card\n        variant=\"outlined\"\n        sx={{ minWidth: 275, borderRadius: 5 }}\n        key=\"generate-mnenomic-card\"\n      >\n        <CardContent sx={{ pb: 1 }}>\n          <Typography sx={{ fontSize: 26 }}>Generate Mnenomic</Typography>\n        </CardContent>\n        <Divider flexItem />\n        <CardContent sx={{ pb: 0 }}>\n          <Typography sx={{ fontSize: 20, pb: 1 }}>Mnenomic</Typography>\n        </CardContent>\n        <CardContent\n          sx={{\n            py: 1,\n            mx: 2,\n            borderRadius: 2,\n            backgroundColor: \"#f7f7f7\",\n          }}\n        >\n          <Grid container spacing={2} alignItems=\"center\">\n            <Grid item xs>\n              {mnenomic ? (\n                <Typography\n                  sx={{\n                    minHeight: 24,\n                    fontSize: 16,\n                  }}\n                >\n                  {mnenomic}\n                </Typography>\n              ) : (\n                <Typography\n                  sx={{\n                    minHeight: 24,\n                    fontSize: 16,\n                    color: \"#929292\",\n                  }}\n                >\n                  {`Click \"Generate Mnenomic\" to randomly generate mnenomic`}\n                </Typography>\n              )}\n            </Grid>\n            <Grid item>\n              {mnenomic ? (\n                <IconButton onClick={() => contentCopy(mnenomic, appStore)}>\n                  <ContentCopyIcon />\n                </IconButton>\n              ) : null}\n            </Grid>\n          </Grid>\n        </CardContent>\n        <CardActions sx={{ p: 2 }}>\n          <CardActionButton\n            buttonText=\"Generate Mnenomic\"\n            onClick={generateMnenomic}\n            disabled={!isInit || !!mnenomic}\n            testId=\"generate-mnenomic\"\n          />\n        </CardActions>\n        {!!mnenomic && (\n          <>\n            <CardContent sx={{ pb: 0 }}>\n              <Typography sx={{ fontSize: 20 }}>Coin Type</Typography>\n            </CardContent>\n            <CardActions sx={{ pl: 2, pr: 2, pb: 2 }}>\n              <DemoAutocompleteCoinType\n                setCoinType={setCoinType}\n                setNetwork={setNetwork}\n                setSegwitType={setSegwitType}\n              />\n              {network && (\n                <DemoAutocompleteSegwit setSegwitType={setSegwitType} />\n              )}\n              <CardActionButton\n                buttonText=\"Derive Address\"\n                onClick={generatePrivateKey}\n                disabled={!isInit || !mnenomic || !coinType}\n                testId=\"derive-address\"\n              />\n            </CardActions>\n            {errorMessage && (\n              <Alert severity=\"error\">\n                <AlertTitle>Failure</AlertTitle>\n                {errorMessage}\n              </Alert>\n            )}\n            {walletInfos &&\n              walletInfos.map((walletInfo, index) => {\n                return walletInfo ? (\n                  <DemoWalletInfo\n                    walletInfo={walletInfo}\n                    index={index}\n                    callback={deletePrivateKey}\n                  />\n                ) : null;\n              })}\n          </>\n        )}\n      </Card>\n      <DemoDialog\n        title={\"Already created\"}\n        content={\n          \"The Private Key is already created, please try other coin types!\"\n        }\n        showDialog={showDialog}\n        handleConfirm={handleDialogClose}\n      ></DemoDialog>\n    </>\n  ) : null;\n};\n\nexport default observer(GenerateMnenomicCard);\n"],"names":["CardActionButton","_ref","buttonText","onClick","disabled","testId","_jsx","Button","size","variant","sx","backgroundColor","borderRadius","children","DemoAutocompleteCoinType","setCoinType","setNetwork","setSegwitType","walletStore","useStore","coinTypeOptions","coinTypeMapping","map","data","network","label","value","Autocomplete","options","width","py","pr","renderInput","params","TextField","onChange","_","undefined","isOptionEqualToValue","option","groupBy","DemoAutocompleteSegwit","segwitTypeOptions","enumValue","defaultValue","DemoDialog","title","content","closeButtonText","confirmButtonText","showDialog","handleClose","handleConfirm","_jsxs","Dialog","open","onClose","DialogTitle","id","DialogContent","DialogContentText","DialogActions","autoFocus","observer","walletInfo","index","callback","appStore","_Fragment","Alert","severity","Grid","container","spacing","item","xs","AlertTitle","IconButton","contentCopy","navigator","clipboard","writeText","JSON","stringify","snackBarMessage","openSnackBar","ContentCopyIcon","fontSize","deleteWalletInfo","DeleteIcon","coinType","segwitType","derivedPath","privateKey","address","publicKey","Divider","flexItem","GenerateMnenomicCard","useState","mnenomic","setMnenomic","walletInfos","setWalletInfos","errorMessage","setErrorMessage","setShowDialog","isInit","useEffect","deletePrivateKey","toSpliced","Card","minWidth","CardContent","pb","Typography","mx","alignItems","minHeight","color","CardActions","p","async","result","bip39","generateMnemonic","err","console","error","pl","findIndex","wallet","getWallet","derivePathParams","Object","assign","getDerivedPath","getDerivedPrivateKey","mnemonic","hdPath","newAddressParams","addressType","getNewAddress","toString","DemoWalletInfo","handleDialogClose"],"sourceRoot":""}